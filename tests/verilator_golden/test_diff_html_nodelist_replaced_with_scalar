<!doctype html>
<html>
<head>
<meta charset="UTF-8"/>
<style>
/* Shared CSS */
.code-block {
    box-sizing: border-box;
    border: solid 1px black;
    .linenos {
        padding: 0 5px 0 5px;
    }
    .chunk {
      content-visibility: auto;
    }
    pre {
        margin: 0 0;
        white-space: pre-wrap;
        overflow-wrap: break-word;
    }
}
pre { line-height: 125%; }
td.linenos .normal { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; }
span.linenos { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; }
td.linenos .special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; }
span.linenos.special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; }
.code-block .hll { background-color: #ebdbb2 }
.code-block { background: #282828; color: #dddddd }
.code-block .c { color: #928374; font-style: italic } /* Comment */
.code-block .err { color: #282828; background-color: #fb4934 } /* Error */
.code-block .esc { color: #dddddd } /* Escape */
.code-block .g { color: #dddddd } /* Generic */
.code-block .k { color: #fb4934 } /* Keyword */
.code-block .l { color: #dddddd } /* Literal */
.code-block .n { color: #dddddd } /* Name */
.code-block .o { color: #dddddd } /* Operator */
.code-block .x { color: #dddddd } /* Other */
.code-block .p { color: #dddddd } /* Punctuation */
.code-block .ch { color: #928374; font-style: italic } /* Comment.Hashbang */
.code-block .cm { color: #928374; font-style: italic } /* Comment.Multiline */
.code-block .c-PreProc { color: #8ec07c; font-style: italic } /* Comment.PreProc */
.code-block .cp { color: #928374; font-style: italic } /* Comment.Preproc */
.code-block .cpf { color: #928374; font-style: italic } /* Comment.PreprocFile */
.code-block .c1 { color: #928374; font-style: italic } /* Comment.Single */
.code-block .cs { color: #ebdbb2; font-weight: bold; font-style: italic } /* Comment.Special */
.code-block .gd { color: #282828; background-color: #fb4934 } /* Generic.Deleted */
.code-block .ge { color: #dddddd; font-style: italic } /* Generic.Emph */
.code-block .ges { color: #dddddd; font-weight: bold; font-style: italic } /* Generic.EmphStrong */
.code-block .gr { color: #fb4934 } /* Generic.Error */
.code-block .gh { color: #ebdbb2; font-weight: bold } /* Generic.Heading */
.code-block .gi { color: #282828; background-color: #b8bb26 } /* Generic.Inserted */
.code-block .go { color: #f2e5bc } /* Generic.Output */
.code-block .gp { color: #a89984 } /* Generic.Prompt */
.code-block .gs { color: #dddddd; font-weight: bold } /* Generic.Strong */
.code-block .gu { color: #ebdbb2; text-decoration: underline } /* Generic.Subheading */
.code-block .gt { color: #fb4934 } /* Generic.Traceback */
.code-block .kc { color: #fb4934 } /* Keyword.Constant */
.code-block .kd { color: #fb4934 } /* Keyword.Declaration */
.code-block .kn { color: #fb4934 } /* Keyword.Namespace */
.code-block .kp { color: #fb4934 } /* Keyword.Pseudo */
.code-block .kr { color: #fb4934 } /* Keyword.Reserved */
.code-block .kt { color: #fb4934 } /* Keyword.Type */
.code-block .ld { color: #dddddd } /* Literal.Date */
.code-block .m { color: #d3869b } /* Literal.Number */
.code-block .s { color: #b8bb26 } /* Literal.String */
.code-block .na { color: #fabd2f } /* Name.Attribute */
.code-block .nb { color: #fe8019 } /* Name.Builtin */
.code-block .nc { color: #8ec07c } /* Name.Class */
.code-block .no { color: #d3869b } /* Name.Constant */
.code-block .nd { color: #fb4934 } /* Name.Decorator */
.code-block .ni { color: #dddddd } /* Name.Entity */
.code-block .ne { color: #fb4934 } /* Name.Exception */
.code-block .nf { color: #8ec07c } /* Name.Function */
.code-block .nl { color: #dddddd } /* Name.Label */
.code-block .nn { color: #8ec07c } /* Name.Namespace */
.code-block .nx { color: #dddddd } /* Name.Other */
.code-block .py { color: #dddddd } /* Name.Property */
.code-block .nt { color: #8ec07c } /* Name.Tag */
.code-block .nv { color: #83a598 } /* Name.Variable */
.code-block .ow { color: #fb4934 } /* Operator.Word */
.code-block .pm { color: #dddddd } /* Punctuation.Marker */
.code-block .w { color: #dddddd } /* Text.Whitespace */
.code-block .mb { color: #d3869b } /* Literal.Number.Bin */
.code-block .mf { color: #d3869b } /* Literal.Number.Float */
.code-block .mh { color: #d3869b } /* Literal.Number.Hex */
.code-block .mi { color: #d3869b } /* Literal.Number.Integer */
.code-block .mo { color: #d3869b } /* Literal.Number.Oct */
.code-block .sa { color: #b8bb26 } /* Literal.String.Affix */
.code-block .sb { color: #b8bb26 } /* Literal.String.Backtick */
.code-block .sc { color: #b8bb26 } /* Literal.String.Char */
.code-block .dl { color: #b8bb26 } /* Literal.String.Delimiter */
.code-block .sd { color: #b8bb26 } /* Literal.String.Doc */
.code-block .s2 { color: #b8bb26 } /* Literal.String.Double */
.code-block .se { color: #fe8019 } /* Literal.String.Escape */
.code-block .sh { color: #b8bb26 } /* Literal.String.Heredoc */
.code-block .si { color: #b8bb26 } /* Literal.String.Interpol */
.code-block .sx { color: #b8bb26 } /* Literal.String.Other */
.code-block .sr { color: #b8bb26 } /* Literal.String.Regex */
.code-block .s1 { color: #b8bb26 } /* Literal.String.Single */
.code-block .ss { color: #b8bb26 } /* Literal.String.Symbol */
.code-block .bp { color: #fe8019 } /* Name.Builtin.Pseudo */
.code-block .fm { color: #8ec07c } /* Name.Function.Magic */
.code-block .vc { color: #83a598 } /* Name.Variable.Class */
.code-block .vg { color: #83a598 } /* Name.Variable.Global */
.code-block .vi { color: #83a598 } /* Name.Variable.Instance */
.code-block .vm { color: #83a598 } /* Name.Variable.Magic */
.code-block .il { color: #d3869b } /* Literal.Number.Integer.Long */
/* AST specific CSS */
a.backref {
    text-decoration: none;
    font-weight: bold;
    span { color: #94c6d4; }}
a { color: inherit; }
:target:not(.backref) {
    background-color: #076678;}
body {
    display: flex;
    flex-flow: row nowrap;
    height: 100vh;
    margin: 0;
    padding: 0;
    border: 0;
    font-size: 14px;

    background: #332d37;
    color: #e6edf3;
}
.pane {
    height: 100vh;
    border: solid 1px black;
    box-sizing: border-box;
    flex: 0 0 50%;
}
.source-pane {
    display: flex;
    flex-flow: column nowrap;

    .tabmenu {
        display: flex;
        flex-flow: row wrap;
    }
    .tabs {
        height: 100%;
        position: relative;
    }
    .tab {
        position: absolute;
        height: 100%;
        width: 100%;
        top: 0;
        left: 0;
        background: #332d37;
    }
    .tab:first-child {
        z-index: 1;
    }
}

.code-block { background: #332d37; }
.y-scrollable {
    overflow-y: scroll;
}
.linenos {
    user-select: none;
    display: inline-block;
    text-align: right;
}
.linenos::selection {
    /* work around imperfect behaviour of "user-select:none" in firefox: programmatically
    selected element would still be highlighted (even though it would be ignored by ctrl+c) */
    background-color: transparent;
}
</style>
<script>
let topIdx = 1;

function showtab(tabname) {
  document.getElementById(tabname).style.zIndex = ++topIdx;
}
function skipToChar(node, i) {
  // Skip to node that contains ith character.
  // Returns node, and char index relative to found node
  if (node == null) {
    return [null, i];
  } else if (node.nodeType == Node.TEXT_NODE) {
    if (i >= node.length) return skipToChar(node.nextSibling, i-node.length);
    else return [node, i];
  } else {
    let subnode = null;
    if (node.childNodes) [subnode, i] = skipToChar(node.childNodes[0], i);

    if (subnode == null || subnode.nodeType != Node.TEXT_NODE || i >= subnode.length) {
      // childlist didn't suffice, try siblings
      return skipToChar(node.nextSibling, i);
    } else {
      return [subnode, i];
    }
  }
}
/* exported selectFileFragment */
function selectFileFragment(name, firstRow, firstCol, lastRow, endCol) {
  showtab(name);
  const range = document.createRange();
  const [startNode, startOffset] =
     skipToChar(document.getElementById(name + '-' + firstRow).nextSibling, firstCol-1);
  range.setStart(startNode, startOffset);
  const [endNode, endOffset] =
     skipToChar(document.getElementById(name + '-' + lastRow).nextSibling, endCol-1);
  range.setEnd(endNode, endOffset);

  // going to href would clear selection in firefox, so it should be done first
  window.location.href = '#' + name + '-' + firstRow;
  const sel = window.getSelection();
  sel.removeAllRanges();
  sel.addRange(range);
  return false; // prevent default action (going to href) of <a href="..." onclick="return selectFileFragment(...)">
}
</script>
</head>
<body>

<div class="pane y-scrollable">


<div class="code-block" style="text-indent: calc(1ch + 10px) hanging each-line;"><pre><span class="linenos" style="width:1ch;">1</span>NETLIST &quot;$root&quot; a:0 <span id="(B)">(B)</span>
<span class="linenos" style="width:1ch;">2</span> <span style="color:#e74a3c;">modulesp:</span>
<span class="linenos" style="width:1ch;">3</span>   <span style="color:#e74a3c;">MODULE</span> <span style="color:#e74a3c;">&quot;serial_adder&quot;</span> <span style="color:#e74a3c;">d:15</span> <span style="color:#e74a3c;"><span id="(E)">(E)</span></span>
<span class="linenos" style="width:1ch;">4</span> <span style="color:#00af91;">modulesp:</span> <span style="color:#00af91;">UNLINKED</span>
</div></pre></div>
</div>

<div class="pane source-pane">
<div class="tabmenu">
</div>
<div class="tabs">
</div>
</div>
</body></html>
